// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: logistica.proto

package logistica

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogisticaService_RegistrarOrden_FullMethodName  = "/logistica.LogisticaService/RegistrarOrden"
	LogisticaService_ConsultarEstado_FullMethodName = "/logistica.LogisticaService/ConsultarEstado"
)

// LogisticaServiceClient is the client API for LogisticaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticaServiceClient interface {
	RegistrarOrden(ctx context.Context, in *OrdenRequest, opts ...grpc.CallOption) (*OrdenResponse, error)
	ConsultarEstado(ctx context.Context, in *EstadoRequest, opts ...grpc.CallOption) (*EstadoResponse, error)
}

type logisticaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticaServiceClient(cc grpc.ClientConnInterface) LogisticaServiceClient {
	return &logisticaServiceClient{cc}
}

func (c *logisticaServiceClient) RegistrarOrden(ctx context.Context, in *OrdenRequest, opts ...grpc.CallOption) (*OrdenResponse, error) {
	out := new(OrdenResponse)
	err := c.cc.Invoke(ctx, LogisticaService_RegistrarOrden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticaServiceClient) ConsultarEstado(ctx context.Context, in *EstadoRequest, opts ...grpc.CallOption) (*EstadoResponse, error) {
	out := new(EstadoResponse)
	err := c.cc.Invoke(ctx, LogisticaService_ConsultarEstado_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticaServiceServer is the server API for LogisticaService service.
// All implementations must embed UnimplementedLogisticaServiceServer
// for forward compatibility
type LogisticaServiceServer interface {
	RegistrarOrden(context.Context, *OrdenRequest) (*OrdenResponse, error)
	ConsultarEstado(context.Context, *EstadoRequest) (*EstadoResponse, error)
	mustEmbedUnimplementedLogisticaServiceServer()
}

// UnimplementedLogisticaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogisticaServiceServer struct {
}

func (UnimplementedLogisticaServiceServer) RegistrarOrden(context.Context, *OrdenRequest) (*OrdenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarOrden not implemented")
}
func (UnimplementedLogisticaServiceServer) ConsultarEstado(context.Context, *EstadoRequest) (*EstadoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarEstado not implemented")
}
func (UnimplementedLogisticaServiceServer) mustEmbedUnimplementedLogisticaServiceServer() {}

// UnsafeLogisticaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticaServiceServer will
// result in compilation errors.
type UnsafeLogisticaServiceServer interface {
	mustEmbedUnimplementedLogisticaServiceServer()
}

func RegisterLogisticaServiceServer(s grpc.ServiceRegistrar, srv LogisticaServiceServer) {
	s.RegisterService(&LogisticaService_ServiceDesc, srv)
}

func _LogisticaService_RegistrarOrden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticaServiceServer).RegistrarOrden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticaService_RegistrarOrden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticaServiceServer).RegistrarOrden(ctx, req.(*OrdenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticaService_ConsultarEstado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstadoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticaServiceServer).ConsultarEstado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticaService_ConsultarEstado_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticaServiceServer).ConsultarEstado(ctx, req.(*EstadoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogisticaService_ServiceDesc is the grpc.ServiceDesc for LogisticaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistica.LogisticaService",
	HandlerType: (*LogisticaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarOrden",
			Handler:    _LogisticaService_RegistrarOrden_Handler,
		},
		{
			MethodName: "ConsultarEstado",
			Handler:    _LogisticaService_ConsultarEstado_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistica.proto",
}
